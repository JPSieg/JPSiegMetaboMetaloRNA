setwd("~/Jacob/Research/Manuscripts/JPSiegMetaboMetaloRNA/R")
setwd("~/Jacob/Research/Manuscripts/JPSiegMetaboMetaloRNA/Figures/Figure_1")
setwd("~/Jacob/Research/Manuscripts/JACS_communication/Figure_1")
library(tidyverse)
setwd("~/Jacob/Research/Manuscripts/JPSiegMetaboMetaloRNA/Figures/Figure_1")
library(tidyverse)
library(cowplot)
library(viridis)
library(ggrepel)
devtools::load_all("~/Jacob/R_packages/MetaboMgITC2")
list.files()
E.coli <- read.csv("Top_15_E.coli_metabolites_edited.csv")
head(E.coli)
E.coli.weak = E.coli %>% filter(Mg.binding.strength == "weak")
Sum.concentration.weak = c()
for (i in 1:length(E.coli.weak$Metabolites)){
Sum.concentration.weak[i] = sum(E.coli.weak$Concentration[1:i])
}
E.coli.strong = E.coli %>% filter(Mg.binding.strength == "strong")
Sum.concentration.strong = c()
for (i in 1:length(E.coli.strong$Metabolites)){
Sum.concentration.strong[i] = sum(sum(E.coli.weak$Concentration), E.coli.strong$Concentration[1:i])
}
Sum.concentration = c(Sum.concentration.weak, Sum.concentration.strong)
E.coli = bind_rows(E.coli.weak, E.coli.strong)
E.coli$Sum.concentration = Sum.concentration
sum(E.coli$Concentration)
df.total =  data.frame("Metabolites" = c("103 other metabolites"),
"Concentration" = c(243 - sum(E.coli$Concentration)),
"Metabolites.sum" = c(243),
"Kd" = c(0),
"Mg.binding.strength" = c("Other"),
"Edited" = c(NA),
"Sum.concentration" = c(243))
E.coli = bind_rows(E.coli, df.total)
Figure_1A = ggplot(E.coli, aes(x = "", y = Concentration, fill = Mg.binding.strength, label = Metabolites)) +
geom_bar(width = 1, stat = "identity", color = "black") +
geom_text(mapping = aes(y = Sum.concentration), nudge_y = -1) +
scale_fill_manual(values = viridis(n =  7, direction = -1)[c(2,4,6)]) +
theme_minimal()+
theme(axis.line.y = element_line(colour = 'black', size = 1.5),
axis.line.x = element_blank(),
axis.ticks = element_line(colour = "black", size = 1.5),
axis.text.x = element_text(color = "Black", size = 8,
angle = 45, hjust = 1, vjust = 1),
legend.position = c(0.5, 0.2),
axis.text.y = element_text(color = "Black", size = 12),
axis.title.x = element_blank(),
axis.ticks.x = element_blank(),
legend.title = element_blank(),
axis.title.y = element_text(color = "Black", size = 12),
legend.text = element_text(color = "Black", size = 16))
Figure_1A
df = read.csv("ITC_data_index.csv")
df = read.csv("ITC_data_index.csv")
list.fits = {}
list.df.fit = {}
colnames(df)
for (i in 1:length(df$Metabolite)){
print(paste(df$Metabolite[i], " at ", df$Temperature[i], "C", sep = ""))
df.Cell = read.itc(c(paste("ITC_data_files", df$Cell[i], sep = "/"),
df$Syrringe.X[i], df$Syringe.M[i], df$Syringe.C[i],
df$Cell.X[i], df$Cell.M[i], df$Cell.C[i]))
df.blank = read.itc(c(paste("ITC_data_files", df$Blank[i], sep = "/"),
df$Syrringe.X[i], df$Syringe.M[i], df$Syringe.C[i],
df$Cell.X[i], df$Cell.M[i], df$Cell.C[i]))
list.fits[[i]] = MetaboMgITC(df.Cell, df.blank,
Fit.start = list(H = df$H.start[i], K = df$K.start[i]),
Saturation.threshold = df$Sat.threshold[i])
list.df.fit[[i]] = data.frame(t(c(list.fits[[i]]$Table[,2], list.fits[[i]]$Table[,3])))
colnames(list.df.fit[[i]]) = c(as.character(t(list.fits[[i]]$Table[,1])), paste("Std.error.", as.character(t(list.fits[[i]]$Table[,1])), sep = ""))
list.df.fit[[i]]$Metabolite = df$Metabolite[i]
}
df.final = bind_rows(list.df.fit)
df.final$Kd = 1000/df.final$K
Std.error.Kd = c()
for (i in 1:length(df.final$n)){
K = df.final$K[i]
dK = df.final$Std.error.K[i]
Kd = z ~ 1000/K
Std.error.Kd[i] = abs(dK*eval(D(Kd[[3]], "K")))
}
df.final$Std.error.Kd = Std.error.Kd
colnames(df.final)
df.final = df.final %>% select(Metabolite, Temp., Std.error.Temp.,
K, Std.error.K,
Kd, Std.error.Kd,
n, Std.error.n,
dG, Std.error.dG,
dH, Std.error.dH,
dS, Std.error.dS,
Saturation, Std.error.Saturation)
df.final
df = read.csv("ITC_data_index.csv")
list.fits = {}
list.df.fit = {}
colnames(df)
df
df = read.csv("ITC_data_index.csv")
list.fits = {}
list.df.fit = {}
colnames(df)
for (i in 1:length(df$Metabolite)){
print(paste(df$Metabolite[i], " at ", df$Temperature[i], "C", sep = ""))
df.Cell = read.itc(c(paste("ITC_data_files", df$Cell[i], sep = "/"),
df$Syrringe.X[i], df$Syringe.M[i], df$Syringe.C[i],
df$Cell.X[i], df$Cell.M[i], df$Cell.C[i]))
df.blank = read.itc(c(paste("ITC_data_files", df$Blank[i], sep = "/"),
df$Syrringe.X[i], df$Syringe.M[i], df$Syringe.C[i],
df$Cell.X[i], df$Cell.M[i], df$Cell.C[i]))
list.fits[[i]] = MetaboMgITC(df.Cell, df.blank,
Fit.start = list(H = df$H.start[i], K = df$K.start[i]),
Saturation.threshold = df$Sat.threshold[i])
list.df.fit[[i]] = data.frame(t(c(list.fits[[i]]$Table[,2], list.fits[[i]]$Table[,3])))
colnames(list.df.fit[[i]]) = c(as.character(t(list.fits[[i]]$Table[,1])), paste("Std.error.", as.character(t(list.fits[[i]]$Table[,1])), sep = ""))
list.df.fit[[i]]$Metabolite = df$Metabolite[i]
}
df.final = bind_rows(list.df.fit)
df.final$Kd = 1000/df.final$K
Std.error.Kd = c()
for (i in 1:length(df.final$n)){
K = df.final$K[i]
dK = df.final$Std.error.K[i]
Kd = z ~ 1000/K
Std.error.Kd[i] = abs(dK*eval(D(Kd[[3]], "K")))
}
df.final$Std.error.Kd = Std.error.Kd
colnames(df.final)
df.final = df.final %>% select(Metabolite, Temp., Std.error.Temp.,
K, Std.error.K,
Kd, Std.error.Kd,
n, Std.error.n,
dG, Std.error.dG,
dH, Std.error.dH,
dS, Std.error.dS,
Saturation, Std.error.Saturation)
df.final
write.csv(df.final, "SI_Table_X_ITC_fit_results.csv", row.names = FALSE)
Figure_1B = list.fits[[9]]$Plot
df.final$ymin = df.final$K - df.final$Std.error.K
df.final$ymax = df.final$K + df.final$Std.error.K
df.final$xmin = df.final$Temp. - df.final$Std.error.Temp.
df.final$xmax = df.final$Temp. + df.final$Std.error.Temp.
df.rect = data.frame(x = c(24, 51, 51, 24), y = c(10, 10, 1/0.002, 1/0.002))
head(df.final)
Figure_1C = ggplot() +
geom_polygon(data = df.rect, mapping = aes(x = x, y = y), fill = "grey") +
geom_hline(yintercept = 1/0.002, size = 1.5) +
stat_smooth(data = df.final, mapping = aes(x = Temp.,
y = K,
color = Metabolite,), method = "lm", se = FALSE) +
geom_pointrange(data = df.final, mapping = aes(x = Temp., color = Metabolite, y = K, xmin = xmin, ymin = ymin, xmax = xmax, ymax = ymax)) +
annotate("text", y = c(650, 403), x = c(30, 30), label = c("Strong", "Weak"), size = 5) +
scale_color_manual(values = viridis(10)) +
scale_y_continuous(trans = "log10", limits = c(10, 15000), expand = c(0, 0)) +
scale_x_continuous(limits = c(24, 51), expand = c(0, 0)) +
ylab("K (1/M)") +
xlab("Temperature (\u00b0C)") +
theme_classic() +
theme(axis.line = element_line(colour = 'black', size = 1.5),
axis.ticks = element_line(colour = "black", size = 1.5),
axis.text.x = element_text(color = "Black", size = 16),
axis.text.y = element_text(color = "Black", size = 16),
axis.title.x = element_text(color = "Black", size = 18),
axis.title.y = element_text(color = "Black", size = 18),
legend.text = element_text(color = "Black", size = 16),
legend.title = element_text(color = "Black", size = 16))
Figure_1C
?Kd.app.calc
list.files()
df = read.csv("Top_15_E.coli_amino_acids.csv")
head(df)
setwd("~/Jacob/R_packages/MetaboMgITC2")
setwd("~/Jacob/Research/Manuscripts/JPSiegMetaboMetaloRNA/Figures/Figure_1")
Kd.app.calc(df$Metabolites[1],
Temperature = df$Temperature[1],
constants.path = "~/Jacob/R_packages/MetaboMgITC2/Binding_constant_concentration_data/210525_Metaboites_binding_Mg_thermodynamics.csv")
metabolite = df$Metabolites[1]
pH = 7
pH = 7
I = 0.39
Temperature = 25
M.charge = 2
A = (0.51 + (((0.856*(20 - Temperature)) + (0.00385*((20 - Temperature)^2)))/1000))
A
Temperature = 25
M.charge = 2
constants.path = "Binding_constant_concentration_data/210525_Metaboites_binding_Mg_thermodynamics.csv"
A = (0.51 + (((0.856*(25 - Temperature)) + (0.00385*((25 - Temperature)^2)))/1000))
A
df = read.csv(constants.path)
constants.path = "~/Jacob/R_packages/MetaboMgITC2/Binding_constant_concentration_data/210525_Metaboites_binding_Mg_thermodynamics.csv"
df = read.csv(constants.path)
df
df = read.csv(constants.path)
df = subset(df, df$Metabolite == metabolite)
df
length(df$Metabolite) == 0
####Correct pKas for ionic strength####
df.is = data.frame("IS" = c(0.05, 0.10, 0.15, 0.2, 0.5, 1.0, 2.0, 3.0),
"Correction" = c(0.09, 0.11, 0.12, 0.13, 0.15, 0.14, 0.11, 0.07))
correction = df.is$Correction[findInterval(I, df.is$IS)]
df$Log_K[-c(which(df$Equilibrium == "logK_ML/M.L"), which(df$Equilibrium == "logK_MHL/M.HL"))] = df$Log_K[-c(which(df$Equilibrium == "logK_ML/M.L"), which(df$Equilibrium == "logK_MHL/M.HL"))] + correction
df.pKa = df[-c(which(df$Equilibrium == "logK_ML/M.L"), which(df$Equilibrium == "logK_MHL/M.HL")),]
if (length(which(is.na(df.pKa$Log_K))) >= 2){
monoprotic = TRUE
}else{
monoprotic = FALSE
}
if (monoprotic){
pKa = df.pKa$Log_K[which(df.pKa$Equilibrium == "logK_HL/H.L")]
a.L = 1/(1 + (10^(pKa - pH)))
a.HL = 1 - a.L
}else{
pKa.HL = df.pKa$Log_K[which(df.pKa$Equilibrium == "logK_HL/H.L")]
pKa.H2L = df.pKa$Log_K[which(df.pKa$Equilibrium == "logK_H2L/H.HL")]
a.L = 1/(1 + 10^(pKa.HL - pH) + 10^(pKa.H2L + pKa.HL - (2*pH)))
a.HL = 1/(1 + 10^(pH - pKa.HL) + 10^(pKa.H2L - pH))
}
a.L
a.HL
L.charge = df$X.charge[1]
HL.charge = L.charge + 1
L.charge
HL.charge
z.L = ((L.charge)^2 + (M.charge)^2 - (L.charge + M.charge)^2)
z.HL = ((HL.charge)^2 + (M.charge)^2 - (L.charge + M.charge)^2)
z.L
z.HL
#Compile dH data
I.ref.dH.L = as.numeric(as.character(df$Ionic.strength[which(df$Equilibrium == "dH_logK_ML/M.L")]))
I.ref.dH.HL = as.numeric(as.character(df$Ionic.strength[which(df$Equilibrium == "dH_logK_MHL/M.HL")]))
T.ref.dH.L = as.numeric(as.character(df$Temperature[which(df$Equilibrium == "dH_logK_ML/M.L")]))
T.ref.dH.HL = as.numeric(as.character(df$Temperature[which(df$Equilibrium == "dH_logK_MHL/M.HL")]))
dH.log10K.ref.ML.over.M.L = 4.184*as.numeric(as.character(df$Log_K[which(df$Equilibrium == "dH_logK_ML/M.L")]))
dH.log10K.ref.MHL.over.M.HL = 4.184*as.numeric(as.character(df$Log_K[which(df$Equilibrium == "dH_logK_MHL/M.HL")]))
dH.log10K.ref.ML.over.M.L
dH.log10K.ref.MHL.over.M.HL
Kd.app.calc(df$Metabolites[1],
Temperature = df$Temperature[1],
constants.path = "~/Jacob/R_packages/MetaboMgITC2/Binding_constant_concentration_data/210525_Metaboites_binding_Mg_thermodynamics.csv")
df$Metabolites[1]
df = read.csv("Top_15_E.coli_amino_acids.csv")
metabolite = df$Metabolites[1]
metabolite
df = read.csv("Top_15_E.coli_amino_acids.csv")
head(df)
Kd.app.calc(df$Metabolites[1],
Temperature = df$Temperature[1],
constants.path = "~/Jacob/R_packages/MetaboMgITC2/Binding_constant_concentration_data/210525_Metaboites_binding_Mg_thermodynamics.csv")
df$Temperature[1]
df$Metabolites[1]
metabolite = "L-Glutamic acid"
pH = 7
I = 0.39
Kd.app = c()
Kd.app = c()
for (i in 1:length(df$Metabolites)){
Kd.app[i] = Kd.app.calc(df$Metabolites[i],
Temperature = df$Temperature[i],
constants.path = "~/Jacob/R_packages/MetaboMgITC2/Binding_constant_concentration_data/210525_Metaboites_binding_Mg_thermodynamics.csv")
}
Kd.app
df$K.app = 1000/Kd.app
View(df)
range(df$K.app)
head(df)
length(unique(df$Metabolites))
Figure_1D = ggplot() +
#geom_polygon(data = df.rect, mapping = aes(x = x, y = y), fill = "grey") +
geom_line(data = df, mapping = aes(x = Temperature, color =  Metabolites, y = K.app)) +
scale_color_manual(values = viridis(7)) +
scale_y_continuous(trans = "log10", limits = c(0.001, 50), expand = c(0, 0)) +
scale_x_continuous(limits = c(24, 51), expand = c(0, 0)) +
ylab("K (1/M)") +
xlab("Temperature (\u00b0C)") +
theme_classic() +
theme(axis.line = element_line(colour = 'black', size = 1.5),
axis.ticks = element_line(colour = "black", size = 1.5),
axis.text.x = element_text(color = "Black", size = 16),
axis.text.y = element_text(color = "Black", size = 16),
axis.title.x = element_text(color = "Black", size = 18),
axis.title.y = element_text(color = "Black", size = 18),
legend.text = element_text(color = "Black", size = 16),
legend.title = element_text(color = "Black", size = 16))
Figure_1D
View(df)
Figure_1D = ggplot() +
#geom_polygon(data = df.rect, mapping = aes(x = x, y = y), fill = "grey") +
geom_line(data = df, mapping = aes(x = Temperature, color =  Metabolites, y = K.app)) +
scale_color_manual(values = viridis(7)) +
scale_y_continuous(trans = "log10", limits = c(0.001, 50), expand = c(0, 0), labels = comma) +
scale_x_continuous(limits = c(24, 51), expand = c(0, 0)) +
ylab("K (1/M)") +
xlab("Temperature (\u00b0C)") +
theme_classic() +
theme(axis.line = element_line(colour = 'black', size = 1.5),
axis.ticks = element_line(colour = "black", size = 1.5),
axis.text.x = element_text(color = "Black", size = 16),
axis.text.y = element_text(color = "Black", size = 16),
axis.title.x = element_text(color = "Black", size = 18),
axis.title.y = element_text(color = "Black", size = 18),
legend.text = element_text(color = "Black", size = 16),
legend.title = element_text(color = "Black", size = 16))
Figure_1D
options(scipen=10000)
Figure_1D = ggplot() +
#geom_polygon(data = df.rect, mapping = aes(x = x, y = y), fill = "grey") +
geom_line(data = df, mapping = aes(x = Temperature, color =  Metabolites, y = K.app)) +
scale_color_manual(values = viridis(7)) +
scale_y_continuous(trans = "log10", limits = c(0.001, 50), expand = c(0, 0)) +
scale_x_continuous(limits = c(24, 51), expand = c(0, 0)) +
ylab("K (1/M)") +
xlab("Temperature (\u00b0C)") +
theme_classic() +
theme(axis.line = element_line(colour = 'black', size = 1.5),
axis.ticks = element_line(colour = "black", size = 1.5),
axis.text.x = element_text(color = "Black", size = 16),
axis.text.y = element_text(color = "Black", size = 16),
axis.title.x = element_text(color = "Black", size = 18),
axis.title.y = element_text(color = "Black", size = 18),
legend.text = element_text(color = "Black", size = 16),
legend.title = element_text(color = "Black", size = 16))
Figure_1D
options(scipen=10000)
Figure_1CD = plot_grid(Figure_1C, Figure_1D)
Figure_1CD
Figure_1CD = plot_grid(Figure_1C, Figure_1D, nrow = 2)
Figure_1CD
1/0.002
df.rect = data.frame(x = c(24, 51, 51, 24), y = c(0.001, 0.001, 50, 50))
Figure_1D = ggplot() +
geom_polygon(data = df.rect, mapping = aes(x = x, y = y), fill = "grey") +
geom_line(data = df, mapping = aes(x = Temperature, color =  Metabolites, y = K.app)) +
scale_color_manual(values = viridis(7)) +
scale_y_continuous(trans = "log10", limits = c(0.001, 50), expand = c(0, 0)) +
scale_x_continuous(limits = c(24, 51), expand = c(0, 0)) +
ylab("K (1/M)") +
xlab("Temperature (\u00b0C)") +
theme_classic() +
theme(axis.line = element_line(colour = 'black', size = 1.5),
axis.ticks = element_line(colour = "black", size = 1.5),
axis.text.x = element_text(color = "Black", size = 16),
axis.text.y = element_text(color = "Black", size = 16),
axis.title.x = element_text(color = "Black", size = 18),
axis.title.y = element_text(color = "Black", size = 18),
legend.text = element_text(color = "Black", size = 16),
legend.title = element_text(color = "Black", size = 16))
Figure_1D
Figure_1CD = plot_grid(Figure_1C, Figure_1D, nrow = 2)
Figure_1CD
Figure_1B
Figure_1BCD = plot_grid(Figure_1B, Figure_1BCD)
Figure_1BCD = plot_grid(Figure_1B, Figure_1CD)
Figure_1BCD
?plot_grid
Figure_1CD = plot_grid(Figure_1C, Figure_1D, nrow = 2)
Figure_1BCD = plot_grid(Figure_1B, Figure_1CD, c(1, 1.5))
Figure_1BCD
Figure_1BCD = plot_grid(Figure_1B, Figure_1CD, rel_widths = c(1, 1.5))
Figure_1BCD
Figure_1 = plot_grid(Figure_1A, Figure_1BCD, rel_widths = c(1, 5))
Figure_1
ggsave("Figure_1.svg", Figure_1, scale = 2, units = "in", width = 3.3 height = 3)
ggsave("Figure_1.svg", Figure_1, scale = 2, units = "in", width = 3.3, height = 3)
ggsave("Figure_1.svg", Figure_1, scale = 10, units = "in", width = 3.3, height = 3)
ggsave("Figure_1.svg", Figure_1, scale = 8, units = "in", width = 3.3, height = 3)
Figure_1CD = plot_grid(Figure_1C, Figure_1D, nrow = 2)
Figure_1BCD = plot_grid(Figure_1B, Figure_1CD, rel_widths = c(1, 1))
Figure_1 = plot_grid(Figure_1A, Figure_1BCD, rel_widths = c(1, 5))
ggsave("Figure_1.svg", Figure_1, scale = 8, units = "in", width = 3.3, height = 3)
Figure_1BCD = plot_grid(Figure_1B, Figure_1CD, rel_widths = c(1, 1.2))
Figure_1CD = plot_grid(Figure_1C, Figure_1D, nrow = 2)
Figure_1BCD = plot_grid(Figure_1B, Figure_1CD, rel_widths = c(1, 1.2))
Figure_1 = plot_grid(Figure_1A, Figure_1BCD, rel_widths = c(1, 5))
Figure_1
Figure_1
?ggsave
