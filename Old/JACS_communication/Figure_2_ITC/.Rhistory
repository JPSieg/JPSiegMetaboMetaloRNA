paste(fit$coefficients[i+1], "*(Mg.total)^(", i, ")", sep = "")
1.52034661361438e-10
1.52034661361438e-10+1
1.52034661361438e-10+2
terms = c()
for(i in 7:0){
terms[i] = paste(fit$coefficients[i+1], "*(Mg.total)^(", i, ")", sep = "")
}
terms
1+1
1+-1
formula.text = paste(terms, sep = "+")
formula.text
formula.text = paste("Mg.free ~ ", formula.text, sep = "")
formula.text
formula.text = paste(terms, sep = "+")
formula.text
length(fit$coefficients)
terms = c()
for(i in (length(fit$coefficients)-1):0){
terms[i] = paste(fit$coefficients[i+1], "*(Mg.total)^(", i, ")", sep = "")
if (i = length(fit$coefficients)-1){
formula.text = paste("Mg.free ~ ", terms[i], sep = "")
}else{
formula.text = paste(formula.text, terms[i], sep = "+")
}
}
terms = c()
for(i in (length(fit$coefficients)-1):0){
terms[i] = paste(fit$coefficients[i+1], "*(Mg.total)^(", i, ")", sep = "")
}
if (i = length(fit$coefficients)-1){
formula.text = paste("Mg.free ~ ", terms[i], sep = "")
}else{
formula.text = paste(formula.text, terms[i], sep = "+")
}
formula.text = paste("Mg.free ~ ", terms[i], sep = "")
formula.text
terms[i]
(length(fit$coefficients)-1):0
i = 7
terms[i] = paste(fit$coefficients[i+1], "*(Mg.total)^(", i, ")", sep = "")
terms[i]
if (i == length(fit$coefficients)-1){
formula.text = paste("Mg.free ~ ", terms[i], sep = "")
}else{
formula.text = paste(formula.text, terms[i], sep = "+")
}
terms
formula.text
terms = c()
for(i in (length(fit$coefficients)-1):0){
terms[i] = paste(fit$coefficients[i+1], "*(Mg.total)^(", i, ")", sep = "")
if (i == length(fit$coefficients)-1){
formula.text = paste("Mg.free ~ ", terms[i], sep = "")
}else{
formula.text = paste(formula.text, terms[i], sep = "+")
}
}
formula.text
terms
terms = c()
i = 8
terms[i] = paste(fit$coefficients[i], "*(Mg.total)^(", i - 1, ")", sep = "")
terms[i]
if (i == length(fit$coefficients)){
formula.text = paste("Mg.free ~ ", terms[i], sep = "")
}else{
formula.text = paste(formula.text, terms[i], sep = "+")
}
formula.text
terms = c()
for(i in length(fit$coefficients):1){
terms[i] = paste(fit$coefficients[i], "*(Mg.total)^(", i - 1, ")", sep = "")
if (i == length(fit$coefficients)){
formula.text = paste("Mg.free ~ ", terms[i], sep = "")
}else{
formula.text = paste(formula.text, terms[i], sep = "+")
}
}
formula.text
fit
as.formula(formula.text)
?eval
Mg.total = 10
eval(as.formula(formula.text), "Mg.total"))
eval(as.formula(formula.text), "Mg.total")
?model.frame
as.formula(formula.text)
model.frame(as.formula(formula.text), data = data.frame(Mg.total =c(1:20)))
model.frame(as.formula(formula.text), data = data.frame(Mg.total =c(1:20), Mg.free))
eval(as.formula(formula.text))
Mg.total = 5
eval(as.formula(formula.text))
formula.text
Mg.total.start = 10
formula.text.rec = gsub("Mg.total", Mg.total, formula.text)
formula.text.rec
terms = c()
for(i in length(fit$coefficients):1){
terms[i] = paste(fit$coefficients[i], "*(Mg.total)^(", i - 1, ")", sep = "")
if (i == length(fit$coefficients)){
formula.text = paste(terms[i], sep = "")
}else{
formula.text = paste(formula.text, terms[i], sep = "+")
}
}
first.recursion = TRUE
Mg.total = Mg.total.start
formula.text.rec = gsub("Mg.total", Mg.total, formula.text)
eval(as.formula(formula.text.rec))
formula.text.rec
eval(parse(text = formula.text.rec))
Mg.total.start = c(1:100)
Mg.free = c()
for (i in 1:length(Mg.total.start)){
Mg.total = Mg.total.start
formula.text.rec = gsub("Mg.total", Mg.total, formula.text)
Mg.free[i] = eval(parse(text = formula.text.rec))
}
Mg.free = c()
for (i in 1:length(Mg.total.start)){
Mg.total = Mg.total.start[i]
formula.text.rec = gsub("Mg.total", Mg.total, formula.text)
Mg.free[i] = eval(parse(text = formula.text.rec))
}
Mg.free
Mg.free
Mg.free.error = abs(Mg.free - 2)
Mg.free.error
min(Mg.free.error)
min(Mg.free.error) <= 0.0001
Mg.total.start[which.min(Mg.free)]
which.min(Mg.free.error)
Mg.total.start[which.min(Mg.free.error)]
best.Mg.total = Mg.total.start[which.min(Mg.free.error)]
best.Mg.total
?seq
min(Mg.free.error) <= 0.0001
seq(best.Mg.total - min(Mg.free.error), best.Mg.total - min(Mg.free.error), length.out = 100)
seq(best.Mg.total - min(Mg.free.error), best.Mg.total + min(Mg.free.error), length.out = 100)
best.Mg.total = Mg.total.start[which.min(Mg.free.error)]
Mg.total.start = seq(best.Mg.total - min(Mg.free.error), best.Mg.total + min(Mg.free.error), length.out = 100)
Mg.free = c()
for (i in 1:length(Mg.total.start)){
Mg.total = Mg.total.start[i]
formula.text.rec = gsub("Mg.total", Mg.total, formula.text)
Mg.free[i] = eval(parse(text = formula.text.rec))
first.recursion = FALSE
}
Mg.free
Mg.free.error = abs(Mg.free - 2)
Mg.free.error
min(Mg.free.error)
min(Mg.free.error) <= 0.0001
best.Mg.total = Mg.total.start[which.min(Mg.free.error)]
best.Mg.total
Mg.total.start = seq(best.Mg.total - min(Mg.free.error), best.Mg.total + min(Mg.free.error), length.out = 100)
Mg.free = c()
for (i in 1:length(Mg.total.start)){
Mg.total = Mg.total.start[i]
formula.text.rec = gsub("Mg.total", Mg.total, formula.text)
Mg.free[i] = eval(parse(text = formula.text.rec))
first.recursion = FALSE
}
Mg.free.error = abs(Mg.free - 2)
min(Mg.free.error)
min(Mg.free.error) <= 0.0001
output = Mg.total.start[which.min(Mg.free.error)]
output
Go = FALSE
first.recursion = TRUE
Go = TRUE
while(Go){
if (first.recursion){
Mg.free = c()
for (i in 1:length(Mg.total.start)){
Mg.total = Mg.total.start[i]
formula.text.rec = gsub("Mg.total", Mg.total, formula.text)
Mg.free[i] = eval(parse(text = formula.text.rec))
first.recursion = FALSE
}
}else{
Mg.free.error = abs(Mg.free - 2)
if(min(Mg.free.error) <= 0.0001){
output = Mg.total.start[which.min(Mg.free.error)]
Go = FALSE
}else{
best.Mg.total = Mg.total.start[which.min(Mg.free.error)]
Mg.total.start = seq(best.Mg.total - min(Mg.free.error), best.Mg.total + min(Mg.free.error), length.out = 100)
Mg.free = c()
for (i in 1:length(Mg.total.start)){
Mg.total = Mg.total.start[i]
formula.text.rec = gsub("Mg.total", Mg.total, formula.text)
Mg.free[i] = eval(parse(text = formula.text.rec))
first.recursion = FALSE
}
}
}
}
output
find.Mg.total = function(fit,
Mg.total.start = c(1:100)){
terms = c()
for(i in length(fit$coefficients):1){
terms[i] = paste(fit$coefficients[i], "*(Mg.total)^(", i - 1, ")", sep = "")
if (i == length(fit$coefficients)){
formula.text = paste(terms[i], sep = "")
}else{
formula.text = paste(formula.text, terms[i], sep = "+")
}
}
first.recursion = TRUE
Go = TRUE
while(Go){
if (first.recursion){
Mg.free = c()
for (i in 1:length(Mg.total.start)){
Mg.total = Mg.total.start[i]
formula.text.rec = gsub("Mg.total", Mg.total, formula.text)
Mg.free[i] = eval(parse(text = formula.text.rec))
first.recursion = FALSE
}
}else{
Mg.free.error = abs(Mg.free - 2)
if(min(Mg.free.error) <= 0.0001){
output = Mg.total.start[which.min(Mg.free.error)]
Go = FALSE
}else{
best.Mg.total = Mg.total.start[which.min(Mg.free.error)]
Mg.total.start = seq(best.Mg.total - min(Mg.free.error), best.Mg.total + min(Mg.free.error), length.out = 100)
Mg.free = c()
for (i in 1:length(Mg.total.start)){
Mg.total = Mg.total.start[i]
formula.text.rec = gsub("Mg.total", Mg.total, formula.text)
Mg.free[i] = eval(parse(text = formula.text.rec))
first.recursion = FALSE
}
}
}
}
output = output
}
find.Mg.total(best.polynomial.none)
find.Mg.total = function(fit,
Mg.total.start = c(1:100)){
terms = c()
for(i in length(fit$coefficients):1){
terms[i] = paste(fit$coefficients[i], "*(Mg.total)^(", i - 1, ")", sep = "")
if (i == length(fit$coefficients)){
formula.text = paste(terms[i], sep = "")
}else{
formula.text = paste(formula.text, terms[i], sep = "+")
}
}
first.recursion = TRUE
Go = TRUE
while(Go){
if (first.recursion){
Mg.free = c()
for (i in 1:length(Mg.total.start)){
Mg.total = Mg.total.start[i]
formula.text.rec = gsub("Mg.total", Mg.total, formula.text)
Mg.free[i] = eval(parse(text = formula.text.rec))
first.recursion = FALSE
}
}else{
Mg.free.error = abs(Mg.free - 2)
if(min(Mg.free.error) <= 0.0001){
output = Mg.total.start[which.min(Mg.free.error)]
Go = FALSE
}else{
best.Mg.total = Mg.total.start[which.min(Mg.free.error)]
Mg.total.start = seq(best.Mg.total - min(Mg.free.error), best.Mg.total + min(Mg.free.error), length.out = 100)
Mg.free = c()
for (i in 1:length(Mg.total.start)){
Mg.total = Mg.total.start[i]
formula.text.rec = gsub("Mg.total", Mg.total, formula.text)
Mg.free[i] = eval(parse(text = formula.text.rec))
first.recursion = FALSE
}
}
}
}
print(output)
output = output
}
find.Mg.total(best.polynomial.none)
Mg.total = c(find.Mg.total(best.polynomial.none),
find.Mg.total(best.polynomial.weak),
find.Mg.total(best.polynomial.total),
find.Mg.total(best.polynomial.strong))
best.polynomial.strong
fit = best.polynomial.strong
terms = c()
for(i in length(fit$coefficients):1){
terms[i] = paste(fit$coefficients[i], "*(Mg.total)^(", i - 1, ")", sep = "")
if (i == length(fit$coefficients)){
formula.text = paste(terms[i], sep = "")
}else{
formula.text = paste(formula.text, terms[i], sep = "+")
}
}
formula.text
find.Mg.total = function(fit,
Mg.total.start = c(1:100)){
terms = c()
for(i in length(fit$coefficients):1){
terms[i] = paste(fit$coefficients[i], "*(Mg.total)^(", i - 1, ")", sep = "")
if (i == length(fit$coefficients)){
formula.text = paste(terms[i], sep = "")
}else{
formula.text = paste(formula.text, terms[i], sep = "+")
}
}
first.recursion = TRUE
Go = TRUE
while(Go){
if (first.recursion){
Mg.free = c()
for (i in 1:length(Mg.total.start)){
Mg.total = Mg.total.start[i]
formula.text.rec = gsub("Mg.total", Mg.total, formula.text)
formula.text.rec = gsub("NA", 0, formula.text.rec)
Mg.free[i] = eval(parse(text = formula.text.rec))
first.recursion = FALSE
}
}else{
Mg.free.error = abs(Mg.free - 2)
if(min(Mg.free.error) <= 0.0001){
output = Mg.total.start[which.min(Mg.free.error)]
Go = FALSE
}else{
best.Mg.total = Mg.total.start[which.min(Mg.free.error)]
Mg.total.start = seq(best.Mg.total - min(Mg.free.error), best.Mg.total + min(Mg.free.error), length.out = 100)
Mg.free = c()
for (i in 1:length(Mg.total.start)){
Mg.total = Mg.total.start[i]
formula.text.rec = gsub("Mg.total", Mg.total, formula.text)
formula.text.rec = gsub("NA", 0, formula.text.rec)
Mg.free[i] = eval(parse(text = formula.text.rec))
first.recursion = FALSE
}
}
}
}
print(output)
output = output
}
Mg.total = c(find.Mg.total(best.polynomial.none),
find.Mg.total(best.polynomial.weak),
find.Mg.total(best.polynomial.total),
find.Mg.total(best.polynomial.strong))
Figure_D = ggplot(df.modeled) +
geom_abline(slope = 1, intercept = 0, color = "dimgrey", size = 1.0) +
geom_hline(yintercept = 2, colour = 'black', size = 1.0) +
geom_vline(xintercept = Mg.total, colour = 'black', size = 1.0) +
geom_point(mapping = aes(x = Mg.total, y = Mg.free, color = Condition)) +
geom_line(mapping = aes(x = Mg.total, y = model, color = Condition)) +
theme_classic() +
ylab("[Mg] free (mM)") +
xlab("[Mg] total (mM)") +
scale_color_manual(values = viridis(5)) +
scale_y_continuous(trans = "log10") +
scale_x_continuous(trans = "log10") +
theme(axis.line = element_line(colour = 'black', size = 1.5),
axis.ticks = element_line(colour = "black", size = 1.5),
axis.text.x = element_text(color = "Black", size = 16),
axis.text.y = element_text(color = "Black", size = 16),
axis.title.x = element_text(color = "Black", size = 18),
axis.title.y = element_text(color = "Black", size = 18),
legend.text = element_text(color = "Black", size = 16),
legend.title = element_text(color = "Black", size = 16),
legend.position = "none")
Figure_D
#none
df$Mg.free = df$Emission/(K.HQS*(1-df$Emission))
list.fit = {}
for (i in 1:10){
list.fit[[i]] = lm(Mg.free ~  poly(Mg.total, i, raw=TRUE), df)
}
df.model.sel = data.frame(model.sel(list.fit))
best.polynomial.order = as.integer(rownames(df.model.sel)[which.max(df.model.sel$weight)])
best.polynomial.none = list.fit[[best.polynomial.order]]
df$model = predict(list.fit[[best.polynomial.order]])
#weak
df.weak$Mg.free = df.weak$Emission/(K.HQS*(1-df.weak$Emission))
list.fit.weak = {}
for (i in 1:10){
list.fit.weak[[i]] = lm(Mg.free ~  poly(Mg.total, i, raw=TRUE), df.weak)
}
df.model.sel = data.frame(model.sel(list.fit.weak))
best.polynomial.order = as.integer(rownames(df.model.sel)[which.max(df.model.sel$weight)])
best.polynomial.weak = list.fit.weak[[best.polynomial.order]]
df.weak$model = predict(list.fit.weak[[best.polynomial.order]])
#strong
df.strong$Mg.free = df.strong$Emission/(K.HQS*(1-df.strong$Emission))
list.fit.strong = {}
for (i in 1:10){
list.fit.strong[[i]] = lm(Mg.free ~  poly(Mg.total, i, raw=TRUE), df.strong)
}
df.model.sel = data.frame(model.sel(list.fit.strong))
best.polynomial.order = as.integer(rownames(df.model.sel)[which.max(df.model.sel$weight)])
best.polynomial.strong = list.fit.strong[[best.polynomial.order]]
df.strong$model = predict(list.fit.strong[[best.polynomial.order]])
#total
df.total$Mg.free = df.total$Emission/(K.HQS*(1-df.total$Emission))
list.fit.total = {}
for (i in 1:10){
list.fit.total[[i]] = lm(Mg.free ~  poly(Mg.total, i, raw=TRUE), df.total)
}
df.model.sel = data.frame(model.sel(list.fit.total))
best.polynomial.order = as.integer(rownames(df.model.sel)[which.max(df.model.sel$weight)])
best.polynomial.total = list.fit.total[[best.polynomial.order]]
df.total$model = predict(list.fit.total[[best.polynomial.order]])
df.modeled = bind_rows(df, df.weak, df.strong, df.total)
find.Mg.total = function(fit,
Mg.total.start = c(1:100)){
terms = c()
for(i in length(fit$coefficients):1){
terms[i] = paste(fit$coefficients[i], "*(Mg.total)^(", i - 1, ")", sep = "")
if (i == length(fit$coefficients)){
formula.text = paste(terms[i], sep = "")
}else{
formula.text = paste(formula.text, terms[i], sep = "+")
}
}
first.recursion = TRUE
Go = TRUE
while(Go){
if (first.recursion){
Mg.free = c()
for (i in 1:length(Mg.total.start)){
Mg.total = Mg.total.start[i]
formula.text.rec = gsub("Mg.total", Mg.total, formula.text)
formula.text.rec = gsub("NA", 0, formula.text.rec)
Mg.free[i] = eval(parse(text = formula.text.rec))
first.recursion = FALSE
}
}else{
Mg.free.error = abs(Mg.free - 2)
if(min(Mg.free.error) <= 0.0001){
output = Mg.total.start[which.min(Mg.free.error)]
Go = FALSE
}else{
best.Mg.total = Mg.total.start[which.min(Mg.free.error)]
Mg.total.start = seq(best.Mg.total - min(Mg.free.error), best.Mg.total + min(Mg.free.error), length.out = 100)
Mg.free = c()
for (i in 1:length(Mg.total.start)){
Mg.total = Mg.total.start[i]
formula.text.rec = gsub("Mg.total", Mg.total, formula.text)
formula.text.rec = gsub("NA", 0, formula.text.rec)
Mg.free[i] = eval(parse(text = formula.text.rec))
first.recursion = FALSE
}
}
}
}
print(output)
output = output
}
Mg.total = c(find.Mg.total(best.polynomial.none),
find.Mg.total(best.polynomial.weak),
find.Mg.total(best.polynomial.total),
find.Mg.total(best.polynomial.strong))
Figure_D = ggplot(df.modeled) +
geom_abline(slope = 1, intercept = 0, color = "dimgrey", size = 1.0) +
geom_hline(yintercept = 2, colour = 'black', size = 1.0) +
geom_vline(xintercept = Mg.total, colour = 'black', size = 1.0) +
geom_point(mapping = aes(x = Mg.total, y = Mg.free, color = Condition)) +
geom_line(mapping = aes(x = Mg.total, y = model, color = Condition)) +
theme_classic() +
ylab("[Mg] free (mM)") +
xlab("[Mg] total (mM)") +
scale_color_manual(values = viridis(5)) +
scale_y_continuous(trans = "log10") +
scale_x_continuous(trans = "log10") +
theme(axis.line = element_line(colour = 'black', size = 1.5),
axis.ticks = element_line(colour = "black", size = 1.5),
axis.text.x = element_text(color = "Black", size = 16),
axis.text.y = element_text(color = "Black", size = 16),
axis.title.x = element_text(color = "Black", size = 18),
axis.title.y = element_text(color = "Black", size = 18),
legend.text = element_text(color = "Black", size = 16),
legend.title = element_text(color = "Black", size = 16),
legend.position = "none")
Figure_D
df = data.frame("Predicted" = c(2, 8, 23, 29),
"Experimental" = Mg.total,
"Condition" = c("None", "Weak", "Strong", "Total"))
Figure_E = ggplot(df, aes(x = Predicted, y = Experimental)) +
geom_abline(slope = 1, intercept = 0, color = "black", size = 1.5) +
geom_point(size = 3) +
theme_classic() +
ylab("HQS titration") +
xlab("ITC and Calculated") +
scale_color_manual(values = viridis(5)) +
theme(axis.line = element_line(colour = 'black', size = 1.5),
axis.ticks = element_line(colour = "black", size = 1.5),
axis.text.x = element_text(color = "Black", size = 16),
axis.text.y = element_text(color = "Black", size = 16),
axis.title.x = element_text(color = "Black", size = 18),
axis.title.y = element_text(color = "Black", size = 18),
legend.text = element_text(color = "Black", size = 16),
legend.title = element_text(color = "Black", size = 16),
legend.position = "none")
Figure_E
library(tidyverse)
library(viridis)
library(cowplot)
library(MuMIn)
?MuMIn
