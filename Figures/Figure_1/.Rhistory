K = df.final$K[i]
dK = df.final$Std.error.K[i]
Kd = z ~ 1000/K
Std.error.Kd[i] = abs(dK*eval(D(Kd[[3]], "K")))
}
df.final$Std.error.Kd = Std.error.Kd
colnames(df.final)
df.final = df.final %>% select(Metabolite, Temp., Std.error.Temp.,
K, Std.error.K,
Kd, Std.error.Kd,
n, Std.error.n,
dG, Std.error.dG,
dH, Std.error.dH,
dS, Std.error.dS,
Saturation, Std.error.Saturation) %>% arrange(Metabolite)
df.final
df.inj = bind_rows(list.df.dQ)
View(df.inj)
Wiseman.isotherm.global = function(V, X, M, Temperature, H = 2.5, K = 2880){
x = X/M
r = 1/(K[Temperature]*M)
y = 0.5 + ((1 - x - r)/(2*sqrt(((1 + x + r)^2)-(4*x))))
dQ.dX = H[Temperature]*V*y
}
?nls
nls(dQ.dX ~ Wiseman.isotherm.global(V, X, M, Temperature, H, K),
df.inj %>% filter(Metabolite == unique(df.inj$Metabolite)[i]),
start = list(H = 1.5, K = 3000))
nls(dQ.dX ~ Wiseman.isotherm.global(V, X, M, Temperature, H, K),
df.inj %>% filter(Metabolite == unique(df.inj$Metabolite)[i]),
start = list(H = 1.5, K = 3000),
trace = TRUE)
df.inj$Temperature
round(df.inj$Temperature)
as.character(round(df.inj$Temperature))
df.inj$Temperature = as.character(round(df.inj$Temperature))
nls(dQ.dX ~ Wiseman.isotherm.global(V, X, M, Temperature, H, K),
df.inj %>% filter(Metabolite == unique(df.inj$Metabolite)[i]),
start = list(H = 1.5, K = 3000),
trace = TRUE)
Wiseman.isotherm.global = function(V, X, M, Temperature, H = 2.5, K = 2880){
dQ.dX = H[Temperature]*V*(0.5 + ((1 - (X/M) - (1/(K[Temperature]*M)))/(2*sqrt(((1 + (X/M) + (1/(K[Temperature]*M)))^2)-(4*(X/M))))))
}
df.inj$Temperature = as.character(round(df.inj$Temperature))
df.inj
nls(dQ.dX ~ Wiseman.isotherm.global(V, X, M, Temperature, H, K),
df.inj %>% filter(Metabolite == unique(df.inj$Metabolite)[i]),
start = list(H = 1.5, K = 3000),
trace = TRUE)
df.inj = bind_rows(list.df.dQ)
View(df.inj)
Wiseman.isotherm.global = function(V, X, M, Temperature, H = 2.5, K = 2880){
dQ.dX = H[Temperature]*V*(0.5 + ((1 - (X/M) - (1/(K[Temperature]*M)))/(2*sqrt(((1 + (X/M) + (1/(K[Temperature]*M)))^2)-(4*(X/M))))))
}
df.inj$Temperature = as.factor(as.character(round(df.inj$Temperature)))
nls(dQ.dX ~ Wiseman.isotherm.global(V, X, M, Temperature, H, K),
df.inj %>% filter(Metabolite == unique(df.inj$Metabolite)[i]),
start = list(H = 1.5, K = 3000),
trace = TRUE)
unique(df.inj$Temperature)
df.inj$Temperature = as.character(round(df.inj$Temperature))
df.inj = bind_rows(list.df.dQ)
View(df.inj)
Wiseman.isotherm.global = function(V, X, M, Temperature, H = 2.5, K = 2880){
dQ.dX = H[Temperature]*V*(0.5 + ((1 - (X/M) - (1/(K[Temperature]*M)))/(2*sqrt(((1 + (X/M) + (1/(K[Temperature]*M)))^2)-(4*(X/M))))))
}
df.inj$Temperature = as.character(round(df.inj$Temperature))
unique(df.inj$Temperature)
for (i in 1:length(df.inj$Temperature)){
if (df.inj$Temperature[i] == "25"){df.inj$Temperature[i] = 1}
if (df.inj$Temperature[i] == "31"){df.inj$Temperature[i] = 2}
if (df.inj$Temperature[i] == "37"){df.inj$Temperature[i] = 3}
if (df.inj$Temperature[i] == "43"){df.inj$Temperature[i] = 4}
if (df.inj$Temperature[i] == "49"){df.inj$Temperature[i] = 5}
}
nls(dQ.dX ~ Wiseman.isotherm.global(V, X, M, Temperature, H, K),
df.inj %>% filter(Metabolite == unique(df.inj$Metabolite)[i]),
start = list(H = 1.5, K = 3000),
trace = TRUE)
nls(dQ.dX ~ Wiseman.isotherm.global(V, X, M, Temperature, H, K),
data = df.inj %>% filter(Metabolite == unique(df.inj$Metabolite)[i]),
start = list(H = 1.5, K = 3000),
trace = TRUE)
colnames(df.inj)
df.inj %>% filter(Metabolite == unique(df.inj$Metabolite)[i])
i = 1
df.inj %>% filter(Metabolite == unique(df.inj$Metabolite)[i])
nls(dQ.dX ~ Wiseman.isotherm.global(V, X, M, Temperature, H, K),
data = df.inj %>% filter(Metabolite == unique(df.inj$Metabolite)[i]),
start = list(H = 1.5, K = 3000),
trace = TRUE)
df.inj = bind_rows(list.df.dQ)
Wiseman.isotherm.global = function(V, X, M, Temperature, H = 2.5, K = 2880){
dQ.dX = H[Temperature]*V*(0.5 + ((1 - (X/M) - (1/(K[Temperature]*M)))/(2*sqrt(((1 + (X/M) + (1/(K[Temperature]*M)))^2)-(4*(X/M))))))
}
df.inj$Temperature = as.character(round(df.inj$Temperature))
df.fit = df.inj %>% filter(Metabolite == unique(df.inj$Metabolite)[1])
View(df.fit)
nls(dQ.dX ~ Wiseman.isotherm.global(V, X, M, Temperature, H, K),
data = df.fit,
start = list(H = 1.5, K = 3000),
trace = TRUE)
colnames(df.fit)
unique(df.fit$Temperature)
?rep
rep(1.5, 5)
nls(dQ.dX ~ Wiseman.isotherm.global(V, X, M, Temperature, H, K),
data = df.fit,
start = list(H = rep(1.5, 5), K = rep(3000, 5)),
trace = TRUE)
head(df.fit)
Wiseman.isotherm.global(1.4, 0.0001, M = 0.000099, "25", H = 1.5, K = 3000)
a = Wiseman.isotherm.global(1.4, 0.0001, M = 0.000099, "25", H = 1.5, K = 3000)
a
a = Wiseman.isotherm.global(1.4, 0.0001, M = 0.000099, 25, H = 1.5, K = 3000)
a
nls(dQ.dX ~H[Temperature]*V*(0.5 + ((1 - (X/M) - (1/(K[Temperature]*M)))/(2*sqrt(((1 + (X/M) + (1/(K[Temperature]*M)))^2)-(4*(X/M)))))),
data = df.fit,
start = list(H = rep(1.5, 5), K = rep(3000, 5)),
trace = TRUE)
head(df.fit)
nls(dQ.dX ~ H[Temperature]*V*(0.5 + ((1 - (X/M) - (1/(K[Temperature]*M)))/(2*sqrt(((1 + (X/M) + (1/(K[Temperature]*M)))^2)-(4*(X/M)))))),
data = df.fit,
start = list(H = c(3,3,3,3,3),
K = c(3000,3000,3000,3000,3000)),
trace = TRUE)
df.inj$Temperature = as.factor(as.character(round(df.inj$Temperature)))
df.inj = bind_rows(list.df.dQ)
View(df.inj)
df.inj$Temperature = as.factor(as.character(round(df.inj$Temperature)))
df.fit = df.inj %>% filter(Metabolite == unique(df.inj$Metabolite)[1])
View(df.fit)
colnames(df.fit)
unique(df.fit$Temperature)
head(df.fit)
nls(dQ.dX ~ H[Temperature]*V*(0.5 + ((1 - (X/M) - (1/(K[Temperature]*M)))/(2*sqrt(((1 + (X/M) + (1/(K[Temperature]*M)))^2)-(4*(X/M)))))),
data = df.fit,
start = list(H = c(3,3,3,3,3),
K = c(3000,3000,3000,3000,3000)),
trace = TRUE)
nls(dQ.dX ~ H[Temperature]*V*(0.5 + ((1 - (X/M) - (1/(K[Temperature]*M)))/(2*sqrt(((1 + (X/M) + (1/(K[Temperature]*M)))^2)-(4*(X/M)))))),
data = df.fit,
start = list(H = c(3,3,3,3,3),
K = c(3000,3000,3000,3000,3000)))
df.fit = df.inj %>% filter(Metabolite == unique(df.inj$Metabolite)[2])
df.fit = df.inj %>% filter(Metabolite == unique(df.inj$Metabolite)[2])
colnames(df.fit)
unique(df.fit$Temperature)
nls(dQ.dX ~ H[Temperature]*V*(0.5 + ((1 - (X/M) - (1/(K[Temperature]*M)))/(2*sqrt(((1 + (X/M) + (1/(K[Temperature]*M)))^2)-(4*(X/M)))))),
data = df.fit,
start = list(H = c(3,3,3,3,3),
K = c(3000,3000,3000,3000,3000)))
fit = nls(dQ.dX ~ H[Temperature]*V*(0.5 + ((1 - (X/M) - (1/(K[Temperature]*M)))/(2*sqrt(((1 + (X/M) + (1/(K[Temperature]*M)))^2)-(4*(X/M)))))),
data = df.fit,
start = list(H = c(3,3,3,3,3),
K = c(3000,3000,3000,3000,3000)))
summary(fit)
df = read.csv("ITC_data_index.csv")
list.fits = {}
list.df.fit = {}
list.df.dQ = {}
list.df.dP = {}
colnames(df)
for (i in 1:length(df$Metabolite)){
print(paste(df$Metabolite[i], " at ", df$Temperature[i], "C", sep = ""))
df.Cell = read.itc(c(paste("ITC_data_files", df$Cell[i], sep = "/"),
df$Syrringe.X[i], df$Syringe.M[i], df$Syringe.C[i],
df$Cell.X[i], df$Cell.M[i], df$Cell.C[i]))
df.blank = read.itc(c(paste("ITC_data_files", df$Blank[i], sep = "/"),
df$Syrringe.X[i], df$Syringe.M[i], df$Syringe.C[i],
df$Cell.X[i], df$Cell.M[i], df$Cell.C[i]))
dQ = df.Cell$inj$dQ.dX - df.blank$inj$dQ.dX
list.df.dQ[[i]] = df.Cell$inj
list.df.dQ[[i]]$dQ.dX = dQ
list.df.dQ[[i]]$Metabolite = df$Metabolite[i]
list.df.dQ[[i]]$Replicate = df$Replicate[i]
list.df.dQ[[i]]$Temperature = mean(df.Cell$dP$Temperature)
list.df.dP[[i]] = df.Cell$dP
list.df.dP[[i]]$Metabolite = df$Metabolite[i]
list.df.dP[[i]]$Replicate = df$Replicate[i]
list.fits[[i]] = MetaboMgITC(df.Cell, df.blank,
Fit.start = list(H = df$H.start[i], K = df$K.start[i]),
Saturation.threshold = df$Sat.threshold[i])
list.df.fit[[i]] = data.frame(t(c(list.fits[[i]]$Table[,2], list.fits[[i]]$Table[,3])))
colnames(list.df.fit[[i]]) = c(as.character(t(list.fits[[i]]$Table[,1])), paste("Std.error.", as.character(t(list.fits[[i]]$Table[,1])), sep = ""))
list.df.fit[[i]]$Metabolite = df$Metabolite[i]
}
df.final = bind_rows(list.df.fit)
df.final$Kd = 1000/df.final$K
Std.error.Kd = c()
for (i in 1:length(df.final$n)){
K = df.final$K[i]
dK = df.final$Std.error.K[i]
Kd = z ~ 1000/K
Std.error.Kd[i] = abs(dK*eval(D(Kd[[3]], "K")))
}
df.final$Std.error.Kd = Std.error.Kd
colnames(df.final)
df.final = df.final %>% select(Metabolite, Temp., Std.error.Temp.,
K, Std.error.K,
Kd, Std.error.Kd,
n, Std.error.n,
dG, Std.error.dG,
dH, Std.error.dH,
dS, Std.error.dS,
Saturation, Std.error.Saturation) %>% arrange(Metabolite)
df.final
df = read.csv("ITC_data_index.csv")
list.fits = {}
list.df.fit = {}
list.df.dQ = {}
list.df.dP = {}
colnames(df)
for (i in 1:length(df$Metabolite)){
print(paste(df$Metabolite[i], " at ", df$Temperature[i], "C", sep = ""))
df.Cell = read.itc(c(paste("ITC_data_files", df$Cell[i], sep = "/"),
df$Syrringe.X[i], df$Syringe.M[i], df$Syringe.C[i],
df$Cell.X[i], df$Cell.M[i], df$Cell.C[i]))
df.blank = read.itc(c(paste("ITC_data_files", df$Blank[i], sep = "/"),
df$Syrringe.X[i], df$Syringe.M[i], df$Syringe.C[i],
df$Cell.X[i], df$Cell.M[i], df$Cell.C[i]))
dQ = df.Cell$inj$dQ.dX - df.blank$inj$dQ.dX
list.df.dQ[[i]] = df.Cell$inj
list.df.dQ[[i]]$dQ.dX = dQ
list.df.dQ[[i]]$Metabolite = df$Metabolite[i]
list.df.dQ[[i]]$Replicate = df$Replicate[i]
list.df.dQ[[i]]$Temperature = mean(df.Cell$dP$Temperature)
list.df.dP[[i]] = df.Cell$dP
list.df.dP[[i]]$Metabolite = df$Metabolite[i]
list.df.dP[[i]]$Replicate = df$Replicate[i]
list.fits[[i]] = MetaboMgITC(df.Cell, df.blank,
Fit.start = list(H = df$H.start[i], K = df$K.start[i]),
Saturation.threshold = df$Sat.threshold[i])
list.df.fit[[i]] = data.frame(t(c(list.fits[[i]]$Table[,2], list.fits[[i]]$Table[,3])))
colnames(list.df.fit[[i]]) = c(as.character(t(list.fits[[i]]$Table[,1])), paste("Std.error.", as.character(t(list.fits[[i]]$Table[,1])), sep = ""))
list.df.fit[[i]]$Metabolite = df$Metabolite[i]
}
list.files("ITC_data_files")
df = read.csv("ITC_data_index.csv")
list.fits = {}
list.df.fit = {}
list.df.dQ = {}
list.df.dP = {}
colnames(df)
for (i in 1:length(df$Metabolite)){
print(paste(df$Metabolite[i], " at ", df$Temperature[i], "C", sep = ""))
df.Cell = read.itc(c(paste("ITC_data_files", df$Cell[i], sep = "/"),
df$Syrringe.X[i], df$Syringe.M[i], df$Syringe.C[i],
df$Cell.X[i], df$Cell.M[i], df$Cell.C[i]))
df.blank = read.itc(c(paste("ITC_data_files", df$Blank[i], sep = "/"),
df$Syrringe.X[i], df$Syringe.M[i], df$Syringe.C[i],
df$Cell.X[i], df$Cell.M[i], df$Cell.C[i]))
dQ = df.Cell$inj$dQ.dX - df.blank$inj$dQ.dX
list.df.dQ[[i]] = df.Cell$inj
list.df.dQ[[i]]$dQ.dX = dQ
list.df.dQ[[i]]$Metabolite = df$Metabolite[i]
list.df.dQ[[i]]$Replicate = df$Replicate[i]
list.df.dQ[[i]]$Temperature = mean(df.Cell$dP$Temperature)
list.df.dP[[i]] = df.Cell$dP
list.df.dP[[i]]$Metabolite = df$Metabolite[i]
list.df.dP[[i]]$Replicate = df$Replicate[i]
list.fits[[i]] = MetaboMgITC(df.Cell, df.blank,
Fit.start = list(H = df$H.start[i], K = df$K.start[i]),
Saturation.threshold = df$Sat.threshold[i])
list.df.fit[[i]] = data.frame(t(c(list.fits[[i]]$Table[,2], list.fits[[i]]$Table[,3])))
colnames(list.df.fit[[i]]) = c(as.character(t(list.fits[[i]]$Table[,1])), paste("Std.error.", as.character(t(list.fits[[i]]$Table[,1])), sep = ""))
list.df.fit[[i]]$Metabolite = df$Metabolite[i]
}
df.final = bind_rows(list.df.fit)
df.final$Kd = 1000/df.final$K
Std.error.Kd = c()
for (i in 1:length(df.final$n)){
K = df.final$K[i]
dK = df.final$Std.error.K[i]
Kd = z ~ 1000/K
Std.error.Kd[i] = abs(dK*eval(D(Kd[[3]], "K")))
}
df.final$Std.error.Kd = Std.error.Kd
colnames(df.final)
df.final = df.final %>% select(Metabolite, Temp., Std.error.Temp.,
K, Std.error.K,
Kd, Std.error.Kd,
n, Std.error.n,
dG, Std.error.dG,
dH, Std.error.dH,
dS, Std.error.dS,
Saturation, Std.error.Saturation) %>% arrange(Metabolite)
df.final
df.inj = bind_rows(list.df.dQ)
df.inj$Temperature = as.factor(as.character(round(df.inj$Temperature)))
unique(df.inj$Metabolite)
df.fit = df.inj %>% filter(Metabolite == unique(df.inj$Metabolite)[6])
df.fit
colnames(df.fit)
unique(df.fit$Temperature)
head(df.fit)
fit = nls(dQ.dX ~ H[Temperature]*V*(0.5 + ((1 - (X/M) - (1/(K[Temperature]*M)))/(2*sqrt(((1 + (X/M) + (1/(K[Temperature]*M)))^2)-(4*(X/M)))))),
data = df.fit,
start = list(H = c(3,3,3,3,3),
K = c(3000,3000,3000,3000,3000)))
fit = nls(dQ.dX ~ H[Temperature]*V*(0.5 + ((1 - (X/M) - (1/(K[Temperature]*M)))/(2*sqrt(((1 + (X/M) + (1/(K[Temperature]*M)))^2)-(4*(X/M)))))),
data = df.fit,
start = list(H = c(3,3,3,3,3),
K = c(3000,3000,3000,3000,3000)),
trace = TRUE)
df.final
fit = nls(dQ.dX ~ H[Temperature]*V*(0.5 + ((1 - (X/M) - (1/(K[Temperature]*M)))/(2*sqrt(((1 + (X/M) + (1/(K[Temperature]*M)))^2)-(4*(X/M)))))),
data = df.fit,
start = list(H = c(0.5,0.5,0.5,0.5,0.5),
K = c(100,100,100,100,100)),
trace = TRUE)
df.fit
df.inj = bind_rows(list.df.dQ)
df.inj$Temperature = as.factor(as.character(round(df.inj$Temperature)))
df.fit = df.inj %>% filter(Metabolite == unique(df.inj$Metabolite)[6])
colnames(df.fit)
unique(df.fit$Temperature)
head(df.fit)
fit = nls(dQ.dX ~ H[Temperature]*V*(0.5 + ((1 - (X/M) - (1/(K[Temperature]*M)))/(2*sqrt(((1 + (X/M) + (1/(K[Temperature]*M)))^2)-(4*(X/M)))))),
data = df.fit,
start = list(H = c(0.5,0.5,0.5,0.5,0.5),
K = c(100,100,100,100,100)),
trace = TRUE)
df.fit = df.inj %>% filter(Metabolite == unique(df.inj$Metabolite)[1])
colnames(df.fit)
unique(df.fit$Temperature)
head(df.fit)
fit = nls(dQ.dX ~ H[Temperature]*V*(0.5 + ((1 - (X/M) - (1/(K[Temperature]*M)))/(2*sqrt(((1 + (X/M) + (1/(K[Temperature]*M)))^2)-(4*(X/M)))))),
data = df.fit,
start = list(H = c(0.5,0.5,0.5,0.5,0.5),
K = c(100,100,100,100,100)),
trace = TRUE)
df.fit = df.inj %>% filter(Metabolite == unique(df.inj$Metabolite)[2])
df.inj = bind_rows(list.df.dQ)
df.inj$Temperature = as.factor(as.character(round(df.inj$Temperature)))
df.fit = df.inj %>% filter(Metabolite == unique(df.inj$Metabolite)[2])
colnames(df.fit)
unique(df.fit$Temperature)
head(df.fit)
fit = nls(dQ.dX ~ H[Temperature]*V*(0.5 + ((1 - (X/M) - (1/(K[Temperature]*M)))/(2*sqrt(((1 + (X/M) + (1/(K[Temperature]*M)))^2)-(4*(X/M)))))),
data = df.fit,
start = list(H = c(0.5,0.5,0.5,0.5,0.5),
K = c(100,100,100,100,100)),
trace = TRUE)
summary(fit)
coef(fit)
df.inj = bind_rows(list.df.dQ)
df.inj$Temperature = as.factor(as.character(round(df.inj$Temperature)))
df.fit = df.inj %>% filter(Metabolite == unique(df.inj$Metabolite)[3])
colnames(df.fit)
unique(df.fit$Temperature)
head(df.fit)
fit = nls(dQ.dX ~ H[Temperature]*V*(0.5 + ((1 - (X/M) - (1/(K[Temperature]*M)))/(2*sqrt(((1 + (X/M) + (1/(K[Temperature]*M)))^2)-(4*(X/M)))))),
data = df.fit,
start = list(H = c(0.5,0.5,0.5,0.5,0.5),
K = c(100,100,100,100,100)),
trace = TRUE)
summary(fit)
unique(df.inj$Metabolite)[3]
df.fit = df.inj %>% filter(Metabolite == unique(df.inj$Metabolite)[4])
colnames(df.fit)
unique(df.fit$Temperature)
head(df.fit)
fit = nls(dQ.dX ~ H[Temperature]*V*(0.5 + ((1 - (X/M) - (1/(K[Temperature]*M)))/(2*sqrt(((1 + (X/M) + (1/(K[Temperature]*M)))^2)-(4*(X/M)))))),
data = df.fit,
start = list(H = c(0.5,0.5,0.5,0.5,0.5),
K = c(100,100,100,100,100)),
trace = TRUE)
unique(df.inj$Metabolite)[4]
summary(fit)
df.inj = bind_rows(list.df.dQ)
df.inj$Temperature = as.factor(as.character(round(df.inj$Temperature)))
df.fit = df.inj %>% filter(Metabolite == unique(df.inj$Metabolite)[5])
colnames(df.fit)
unique(df.fit$Temperature)
head(df.fit)
df.inj$Metabolite)[5]
unique(df.inj$Metabolite)[5]
df.fit = df.inj %>% filter(Metabolite == unique(df.inj$Metabolite)[5])
colnames(df.fit)
unique(df.fit$Temperature)
head(df.fit)
fit = nls(dQ.dX ~ H[Temperature]*V*(0.5 + ((1 - (X/M) - (1/(K[Temperature]*M)))/(2*sqrt(((1 + (X/M) + (1/(K[Temperature]*M)))^2)-(4*(X/M)))))),
data = df.fit,
start = list(H = c(0.5,0.5,0.5,0.5,0.5),
K = c(100,100,100,100,100)),
trace = TRUE)
df.final %>% filter(Metabolite == unique(df.inj$Metabolite)[5])
fit = nls(dQ.dX ~ H[Temperature]*V*(0.5 + ((1 - (X/M) - (1/(K[Temperature]*M)))/(2*sqrt(((1 + (X/M) + (1/(K[Temperature]*M)))^2)-(4*(X/M)))))),
data = df.fit,
start = list(H = c(0.5,0.5,0.5,0.5,0.5),
K = c(55,55,55,55,55)),
trace = TRUE)
?nls
fit = nls(dQ.dX ~ H[Temperature]*V*(0.5 + ((1 - (X/M) - (1/(K[Temperature]*M)))/(2*sqrt(((1 + (X/M) + (1/(K[Temperature]*M)))^2)-(4*(X/M)))))),
data = df.fit,
start = list(H = c(0.5,0.5,0.5,0.5,0.5),
K = c(55,55,55,55,55)),
trace = TRUE,
control = nls.control(warnOnly = TRUE))
summary(fit)
plot(df.fit$X/df.fit$M, df.fit$dQ.dX)
df.fit = df.fit[-which(df.fit$N == 1),]
ggplot(df.fit, aes(x = X/M, y = dQ.dX, color = Temperature)) +
geom_point()
View(df.final)
df.final = df.final %>% select(Metabolite, Temp., Std.error.Temp.,
K, Std.error.K,
Kd, Std.error.Kd,
n, Std.error.n,
dG, Std.error.dG,
dH, Std.error.dH,
dS, Std.error.dS,
Saturation, Std.error.Saturation) %>%
arrange(Temperature) %>%
arrange(Metabolite)
df.final = df.final %>% select(Metabolite, Temp., Std.error.Temp.,
K, Std.error.K,
Kd, Std.error.Kd,
n, Std.error.n,
dG, Std.error.dG,
dH, Std.error.dH,
dS, Std.error.dS,
Saturation, Std.error.Saturation) %>%
arrange(Temp.) %>%
arrange(Metabolite)
View(df.final)
df = read.csv("ITC_data_index.csv")
list.fits = {}
list.df.fit = {}
list.df.dQ = {}
list.df.dP = {}
colnames(df)
for (i in 1:length(df$Metabolite)){
print(paste(df$Metabolite[i], " at ", df$Temperature[i], "C", sep = ""))
df.Cell = read.itc(c(paste("ITC_data_files", df$Cell[i], sep = "/"),
df$Syrringe.X[i], df$Syringe.M[i], df$Syringe.C[i],
df$Cell.X[i], df$Cell.M[i], df$Cell.C[i]))
df.blank = read.itc(c(paste("ITC_data_files", df$Blank[i], sep = "/"),
df$Syrringe.X[i], df$Syringe.M[i], df$Syringe.C[i],
df$Cell.X[i], df$Cell.M[i], df$Cell.C[i]))
dQ = df.Cell$inj$dQ.dX - df.blank$inj$dQ.dX
list.df.dQ[[i]] = df.Cell$inj
list.df.dQ[[i]]$dQ.dX = dQ
list.df.dQ[[i]]$Metabolite = df$Metabolite[i]
list.df.dQ[[i]]$Replicate = df$Replicate[i]
list.df.dQ[[i]]$Temperature = mean(df.Cell$dP$Temperature)
list.df.dP[[i]] = df.Cell$dP
list.df.dP[[i]]$Metabolite = df$Metabolite[i]
list.df.dP[[i]]$Replicate = df$Replicate[i]
list.fits[[i]] = MetaboMgITC(df.Cell, df.blank,
Fit.start = list(H = df$H.start[i], K = df$K.start[i]),
Saturation.threshold = df$Sat.threshold[i])
list.df.fit[[i]] = data.frame(t(c(list.fits[[i]]$Table[,2], list.fits[[i]]$Table[,3])))
colnames(list.df.fit[[i]]) = c(as.character(t(list.fits[[i]]$Table[,1])), paste("Std.error.", as.character(t(list.fits[[i]]$Table[,1])), sep = ""))
list.df.fit[[i]]$Metabolite = df$Metabolite[i]
}
df.final = bind_rows(list.df.fit)
df.final$Kd = 1000/df.final$K
Std.error.Kd = c()
for (i in 1:length(df.final$n)){
K = df.final$K[i]
dK = df.final$Std.error.K[i]
Kd = z ~ 1000/K
Std.error.Kd[i] = abs(dK*eval(D(Kd[[3]], "K")))
}
df.final$Std.error.Kd = Std.error.Kd
colnames(df.final)
df.final = df.final %>% select(Metabolite, Temp., Std.error.Temp.,
K, Std.error.K,
Kd, Std.error.Kd,
n, Std.error.n,
dG, Std.error.dG,
dH, Std.error.dH,
dS, Std.error.dS,
Saturation, Std.error.Saturation) %>%
arrange(Temp.) %>%
arrange(Metabolite)
View(df.final)
write.csv(df.final, "SI_Table_X_ITC_fit_results.csv", row.names = FALSE)
Figure_1B = list.fits[[9]]$Plot
df.final$ymin = df.final$K - df.final$Std.error.K
df.final$ymax = df.final$K + df.final$Std.error.K
df.final$xmin = df.final$Temp. - df.final$Std.error.Temp.
df.final$xmax = df.final$Temp. + df.final$Std.error.Temp.
df.rect = data.frame(x = c(24, 51, 51, 24), y = c(10, 10, 1/0.002, 1/0.002))
head(df.final)
one_over_trans = function() trans_new("one_over", function(x) 1/(x + 273.15), function(x)((1/x)  - 273.15))
Figure_1C = ggplot() +
geom_polygon(data = df.rect, mapping = aes(x = x, y = y), fill = "grey") +
geom_hline(yintercept = 1/0.002, size = 1.5) +
stat_smooth(data = df.final, mapping = aes(x = Temp.,
y = K,
color = Metabolite,), method = "lm", se = FALSE) +
geom_pointrange(data = df.final, mapping = aes(x = Temp., color = Metabolite, shape = Metabolite, y = K, xmin = xmin, ymin = ymin, xmax = xmax, ymax = ymax), size = 1) +
annotate("text", y = c(650, 403, 12), x = c(45, 45, 30), label = c("Strong", "Weak", "transformed = 1/(x+273.15)"), size = 5) +
scale_color_manual(values = viridis(9)) +
scale_y_continuous(trans = "log10", limits = c(10, 15000), expand = c(0, 0)) +
scale_x_continuous(trans = "one_over", expand = c(0, 0)) +
ylab("K (1/M)") +
xlab("Temperature (\u00b0C)") +
theme_classic() +
theme(axis.line = element_line(colour = 'black', size = 1.5),
axis.ticks = element_line(colour = "black", size = 1.5),
axis.text.x = element_text(color = "Black", size = 16),
axis.text.y = element_text(color = "Black", size = 16),
axis.title.x = element_text(color = "Black", size = 18),
axis.title.y = element_text(color = "Black", size = 18),
legend.text = element_text(color = "Black", size = 12),
legend.title = element_blank(),
legend.position = c(0.8, 0.55))
Figure_1C
